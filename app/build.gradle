apply plugin: 'com.android.application'
//kotlin
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//here is script to generate version code from version name
//which is set in gradle.properties as value of version var
//which must be in format major, minor, patch, where patch goes from 0 to 99
apply from: '../versioning.gradle'

apply from: '../marketSkusCreator.gradle'
apply from: '../apiKeysCreator.gradle'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "ru.dante.scpfoundation"
        minSdkVersion 17
        targetSdkVersion 26

        // Enabling multidex support.
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // Load keystore
            if (rootProject.file('keystore.properties').exists()) {
                def keystorePropertiesFile = rootProject.file("keystore.properties")
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "lang", "mode"

    productFlavors {
        prod {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: false]
        }

        dev {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: true]

            //PNG optimizations are enabled by default, but are not needed for development builds.
            //Disable them to speed up your builds.
            aaptOptions.cruncherEnabled = false
            //only package russian translations, and xxhdpi resources
            resConfigs ("ru", "xxhdpi")
        }

        ru {
            dimension "lang"
            matchingFallbacks = ['debug', 'release']
        }

        en {
            dimension "lang"

            applicationIdSuffix ".eng"
            matchingFallbacks = ['debug', 'release']
        }

        pl {
            dimension "lang"

            applicationIdSuffix ".pl"
            matchingFallbacks = ['debug', 'release']
        }

        de {
            dimension "lang"

            applicationIdSuffix ".de"
            matchingFallbacks = ['debug', 'release']
        }

        fr {
            dimension "lang"

            applicationIdSuffix ".fr"
            matchingFallbacks = ['debug', 'release']
        }

        es {
            dimension "lang"

            applicationIdSuffix ".es"
            matchingFallbacks = ['debug', 'release']
        }

        italy {
            dimension "lang"

            applicationIdSuffix ".it"
            matchingFallbacks = ['debug', 'release']
        }

        applicationVariants.all { variant ->
            println('variantApp: ' + variant.getName())

            fillArrays(variant, false)
            fillApiArrays(variant, false)

            def versionCode = project.hasProperty('devBuild') ? 100 :  buildVersionCodeFromVariant(variant)
            def versionName = project.hasProperty('devBuild') ? 100 :  getVersionValueAsString(variant)

            variant.mergedFlavor.versionCode = versionCode
            variant.mergedFlavor.versionName = versionName

            //need this as in new gradle plugin there broken functionality of iterating variant during build
            //so we need to set version so
            //see https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#variant_output
            variant.outputs.all { output ->
                output.versionCodeOverride = versionCode
                output.versionNameOverride = versionName
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
    //dev
    ruDevReleaseCompile
    enDevReleaseCompile
    plDevReleaseCompile
    deDevReleaseCompile
    frDevReleaseCompile
    esDevReleaseCompile
    italyDevReleaseCompile
    //prod
    ruProdReleaseCompile
    enProdReleaseCompile
    plProdReleaseCompile
    deProdReleaseCompile
    frProdReleaseCompile
    esProdReleaseCompile
    italyProdReleaseCompile
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //dagger2
    String daggerVersion = '2.13'
    api "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    //core module
    implementation project(':core')
}

apply plugin: 'com.google.gms.google-services'