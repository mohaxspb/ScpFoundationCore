apply plugin: 'com.jfrog.bintray'

version = libraryVersion

/*
if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
//        source = android.sourceSets.main.java.srcDirs
        source = sourceSets.main.allJava
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile
        options.addStringOption('encoding', 'UTF-8')
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}
*/

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
//    options.addStringOption('encoding', 'UTF-8')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
/*
task createPom {
    pom {
        project {
            packaging 'aar'

            name project.name
//            description descr
            url siteUrl
            inceptionYear '2016'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
            developers {
                developer {
                    id 'saschpe'
                    name 'Sascha Peilicke'
                    email 'sascha@peilicke.de'
                }
            }
        }
    }.writeTo("$buildDir/poms/pom-default.xml").writeTo("pom.xml")
}
build.dependsOn createPom
*/